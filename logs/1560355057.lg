----------------------------------------
Starting experiment densenet_smallrotation-1560355057
Experiment parameters Experiment[name: densenet_smallrotation-1560355057, model: DenseNet(
  (features): Sequential(
    (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu0): ReLU(inplace)
    (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (denseblock1): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (transition1): _Transition(
      (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (denseblock2): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer7): _DenseLayer(
        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer8): _DenseLayer(
        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer9): _DenseLayer(
        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer10): _DenseLayer(
        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer11): _DenseLayer(
        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer12): _DenseLayer(
        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (transition2): _Transition(
      (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (denseblock3): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer7): _DenseLayer(
        (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer8): _DenseLayer(
        (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer9): _DenseLayer(
        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer10): _DenseLayer(
        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer11): _DenseLayer(
        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer12): _DenseLayer(
        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer13): _DenseLayer(
        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer14): _DenseLayer(
        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer15): _DenseLayer(
        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer16): _DenseLayer(
        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer17): _DenseLayer(
        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer18): _DenseLayer(
        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer19): _DenseLayer(
        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer20): _DenseLayer(
        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer21): _DenseLayer(
        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer22): _DenseLayer(
        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer23): _DenseLayer(
        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer24): _DenseLayer(
        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (transition3): _Transition(
      (norm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
    )
    (denseblock4): _DenseBlock(
      (denselayer1): _DenseLayer(
        (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer2): _DenseLayer(
        (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer3): _DenseLayer(
        (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer4): _DenseLayer(
        (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer5): _DenseLayer(
        (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer6): _DenseLayer(
        (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer7): _DenseLayer(
        (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer8): _DenseLayer(
        (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer9): _DenseLayer(
        (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer10): _DenseLayer(
        (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer11): _DenseLayer(
        (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer12): _DenseLayer(
        (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer13): _DenseLayer(
        (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer14): _DenseLayer(
        (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer15): _DenseLayer(
        (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
      (denselayer16): _DenseLayer(
        (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu1): ReLU(inplace)
        (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu2): ReLU(inplace)
        (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      )
    )
    (norm5): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  )
  (classifier): Linear(in_features=1024, out_features=1, bias=True)
), params: Params(lr: 0.0001, weight_decay: 0, batch_size: 32, num_epochs: 20), optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0
), criterion: BCEWithLogitsLoss()]
start metrics
eval metrics acc, f1
0.541595458984375, 0.6343031040779062
train metrics acc, f1
0.4558906555175781, 0.5383756493033642
Epoch 1/20
----------
eval metrics, batch: 1024 acc, f1
0.8724365234375, 0.8609632783395423
eval metrics, batch: 2048 acc, f1
0.87542724609375, 0.878793277510541
eval metrics, batch: 3072 acc, f1
0.888397216796875, 0.8848080133555927
eval metrics, batch: 4096 acc, f1
0.89129638671875, 0.8851115985034189
train metrics, batch: 4096  acc, f1 
0.9457359313964844, 0.9457274430281225
eval metrics, batch: 5120 acc, f1
0.8870849609375, 0.8773128191524637
eval metrics, batch: 6144 acc, f1
0.888916015625, 0.8798203909138933
eval metrics, batch: 7168 acc, f1
0.90704345703125, 0.9041656179209665
Epoch loss - train: tensor(0.1892, device='cuda:0', grad_fn=<DivBackward0>)
Epoch loss - valid: tensor(0.2879, device='cuda:0')
epoch end metrics
eval metrics acc, f1 
0.8978271484375, 0.8913128165173354
train metrics acc, f1 
0.9576416015625, 0.957453982558585
Epoch 2/20
----------
eval metrics, batch: 1024 acc, f1
0.89215087890625, 0.883727051391722
eval metrics, batch: 2048 acc, f1
0.891357421875, 0.8936551559326085
eval metrics, batch: 3072 acc, f1
0.904327392578125, 0.9016408872713582
eval metrics, batch: 4096 acc, f1
0.883758544921875, 0.8715822123326927
train metrics, batch: 4096  acc, f1 
0.9544181823730469, 0.9530618417796354
eval metrics, batch: 5120 acc, f1
0.894927978515625, 0.8863583853186784
eval metrics, batch: 6144 acc, f1
0.90765380859375, 0.9069094936319448
eval metrics, batch: 7168 acc, f1
0.903350830078125, 0.9011578914515777
Epoch loss - train: tensor(0.1369, device='cuda:0', grad_fn=<DivBackward0>)
Epoch loss - valid: tensor(0.3228, device='cuda:0')
epoch end metrics
eval metrics acc, f1 
0.8822021484375, 0.8763375408470558
train metrics acc, f1 
0.9525833129882812, 0.9531042496679947
Epoch 3/20
----------
eval metrics, batch: 1024 acc, f1
0.87860107421875, 0.8667515240838749
eval metrics, batch: 2048 acc, f1
0.841949462890625, 0.817299890640985
eval metrics, batch: 3072 acc, f1
0.889617919921875, 0.8807883721696714
eval metrics, batch: 4096 acc, f1
0.87811279296875, 0.8656214252069174
train metrics, batch: 4096  acc, f1 
0.9676551818847656, 0.9674234187160701
eval metrics, batch: 5120 acc, f1
0.848541259765625, 0.8252772399225489
eval metrics, batch: 6144 acc, f1
0.914306640625, 0.9147178521533135
eval metrics, batch: 7168 acc, f1
0.890899658203125, 0.8860630398062275
Epoch loss - train: tensor(0.1165, device='cuda:0', grad_fn=<DivBackward0>)
Epoch loss - valid: tensor(0.2987, device='cuda:0')
epoch end metrics
eval metrics acc, f1 
0.89459228515625, 0.8866277161425852
train metrics acc, f1 
0.9665641784667969, 0.9663126904879952
Epoch 4/20
----------
eval metrics, batch: 1024 acc, f1
0.862945556640625, 0.8456647994776453
eval metrics, batch: 2048 acc, f1
0.88922119140625, 0.8816741638959515
eval metrics, batch: 3072 acc, f1
0.83331298828125, 0.8045236561448715
eval metrics, batch: 4096 acc, f1
0.87384033203125, 0.862236736870168
train metrics, batch: 4096  acc, f1 
0.9701957702636719, 0.9702849797095056
eval metrics, batch: 5120 acc, f1
0.86419677734375, 0.8491013903017972
eval metrics, batch: 6144 acc, f1
0.8619384765625, 0.8451109285127363
eval metrics, batch: 7168 acc, f1
0.883575439453125, 0.8715877343565923
Epoch loss - train: tensor(0.1037, device='cuda:0', grad_fn=<DivBackward0>)
Epoch loss - valid: tensor(0.3227, device='cuda:0')
epoch end metrics
eval metrics acc, f1 
0.876434326171875, 0.8619643405038694
train metrics acc, f1 
0.9712257385253906, 0.970771382847223
Epoch 5/20
----------
eval metrics, batch: 1024 acc, f1
0.866455078125, 0.8493009160410496
eval metrics, batch: 2048 acc, f1
0.900909423828125, 0.8997746704941816
eval metrics, batch: 3072 acc, f1
0.880859375, 0.8680010819583446
eval metrics, batch: 4096 acc, f1
0.862060546875, 0.8460070863995639
train metrics, batch: 4096  acc, f1 
0.9708480834960938, 0.9707588465776907
eval metrics, batch: 5120 acc, f1
0.893707275390625, 0.8853182312074018
eval metrics, batch: 6144 acc, f1
0.88232421875, 0.8741432208368692
eval metrics, batch: 7168 acc, f1
0.8892822265625, 0.8793321359675381
Epoch loss - train: tensor(0.0929, device='cuda:0', grad_fn=<DivBackward0>)
Epoch loss - valid: tensor(0.3325, device='cuda:0')
epoch end metrics
eval metrics acc, f1 
0.888702392578125, 0.8799262502880848
train metrics acc, f1 
0.9759597778320312, 0.9759975014853974
Epoch 6/20
----------
eval metrics, batch: 1024 acc, f1
0.87042236328125, 0.8558919359218029
eval metrics, batch: 2048 acc, f1
0.88909912109375, 0.8799233412635474
eval metrics, batch: 3072 acc, f1
0.87799072265625, 0.8644745762711864
eval metrics, batch: 4096 acc, f1
0.8848876953125, 0.8731674512441157
train metrics, batch: 4096  acc, f1 
0.97479248046875, 0.9744535424060371
eval metrics, batch: 5120 acc, f1
0.895965576171875, 0.8899363962160591
eval metrics, batch: 6144 acc, f1
0.87493896484375, 0.8598303461485839
eval metrics, batch: 7168 acc, f1
0.888763427734375, 0.8772851227148772
Epoch loss - train: tensor(0.0841, device='cuda:0', grad_fn=<DivBackward0>)
Epoch loss - valid: tensor(0.2524, device='cuda:0')
epoch end metrics
eval metrics acc, f1 
0.91168212890625, 0.9086489898989899
train metrics acc, f1 
0.9705047607421875, 0.9708587107278538
Epoch 7/20
----------
eval metrics, batch: 1024 acc, f1
0.8680419921875, 0.851663807890223
eval metrics, batch: 2048 acc, f1
0.8824462890625, 0.871540052024278
eval metrics, batch: 3072 acc, f1
0.864410400390625, 0.8464064714626474
eval metrics, batch: 4096 acc, f1
0.90142822265625, 0.8963680698151951
train metrics, batch: 4096  acc, f1 
0.9763603210449219, 0.9765798315199111
eval metrics, batch: 5120 acc, f1
0.864105224609375, 0.8468022155709224
eval metrics, batch: 6144 acc, f1
0.906219482421875, 0.9013134654292045
eval metrics, batch: 7168 acc, f1
0.89324951171875, 0.8848129610115911
Epoch loss - train: tensor(0.0783, device='cuda:0', grad_fn=<DivBackward0>)
Epoch loss - valid: tensor(0.4900, device='cuda:0')
epoch end metrics
eval metrics acc, f1 
0.8450927734375, 0.8196674719340629
train metrics acc, f1 
0.9719009399414062, 0.9712980930337675
Epoch 8/20
----------
eval metrics, batch: 1024 acc, f1
0.8741455078125, 0.8599470216667798
eval metrics, batch: 2048 acc, f1
0.89764404296875, 0.8893215417106652
eval metrics, batch: 3072 acc, f1
0.841339111328125, 0.8153436334576452
eval metrics, batch: 4096 acc, f1
0.903778076171875, 0.8998507130832513
train metrics, batch: 4096  acc, f1 
0.9735794067382812, 0.9739151394632379
eval metrics, batch: 5120 acc, f1
0.88720703125, 0.8769230769230769
eval metrics, batch: 6144 acc, f1
0.898529052734375, 0.8914710970395273
eval metrics, batch: 7168 acc, f1
0.876495361328125, 0.8647347839165748
Epoch loss - train: tensor(0.0720, device='cuda:0', grad_fn=<DivBackward0>)
Epoch loss - valid: tensor(0.3316, device='cuda:0')
epoch end metrics
eval metrics acc, f1 
0.888031005859375, 0.878296347895313
train metrics acc, f1 
0.9815483093261719, 0.9815479573813892
Epoch 9/20
----------
eval metrics, batch: 1024 acc, f1
0.869476318359375, 0.8536026014033886
eval metrics, batch: 2048 acc, f1
0.8988037109375, 0.8910142641162164
eval metrics, batch: 3072 acc, f1
0.88623046875, 0.8752760120441619
eval metrics, batch: 4096 acc, f1
0.861175537109375, 0.8441002090544569
train metrics, batch: 4096  acc, f1 
0.9789199829101562, 0.9787854822982011
eval metrics, batch: 5120 acc, f1
0.831878662109375, 0.8021832022693813
eval metrics, batch: 6144 acc, f1
0.90179443359375, 0.8962671652375733
eval metrics, batch: 7168 acc, f1
0.904052734375, 0.899533456892695
Epoch loss - train: tensor(0.0674, device='cuda:0', grad_fn=<DivBackward0>)
Epoch loss - valid: tensor(0.3914, device='cuda:0')
epoch end metrics
eval metrics acc, f1 
0.902008056640625, 0.8971591455017135
train metrics acc, f1 
0.9779930114746094, 0.9781055140403278
Epoch 10/20
----------
eval metrics, batch: 1024 acc, f1
0.875885009765625, 0.861868695445437
eval metrics, batch: 2048 acc, f1
0.87457275390625, 0.8611861659011079
eval metrics, batch: 3072 acc, f1
0.830902099609375, 0.7993917671337026
eval metrics, batch: 4096 acc, f1
0.86077880859375, 0.8417510753434161
train metrics, batch: 4096  acc, f1 
0.9805374145507812, 0.9803630261415771
eval metrics, batch: 5120 acc, f1
0.88427734375, 0.8754516192603298
eval metrics, batch: 6144 acc, f1
0.8997802734375, 0.8956731685621704
eval metrics, batch: 7168 acc, f1
0.8983154296875, 0.8925091941415575
Epoch loss - train: tensor(0.0624, device='cuda:0', grad_fn=<DivBackward0>)
Epoch loss - valid: tensor(0.2858, device='cuda:0')
epoch end metrics
eval metrics acc, f1 
0.905548095703125, 0.9025473094241002
train metrics acc, f1 
0.9751777648925781, 0.9755255407738398
Epoch 11/20
----------
eval metrics, batch: 1024 acc, f1
0.872100830078125, 0.8569478103560092
eval metrics, batch: 2048 acc, f1
0.8134765625, 0.7732769493285853
eval metrics, batch: 3072 acc, f1
0.907470703125, 0.9030194472876152
eval metrics, batch: 4096 acc, f1
0.890960693359375, 0.8822851118505585
train metrics, batch: 4096  acc, f1 
0.9844512939453125, 0.9845053182187958
eval metrics, batch: 5120 acc, f1
0.894683837890625, 0.8864466453884373
eval metrics, batch: 6144 acc, f1
0.830474853515625, 0.7997115557959257
eval metrics, batch: 7168 acc, f1
0.87255859375, 0.8575910516982677
Epoch loss - train: tensor(0.0573, device='cuda:0', grad_fn=<DivBackward0>)
Epoch loss - valid: tensor(0.6282, device='cuda:0')
epoch end metrics
eval metrics acc, f1 
0.83349609375, 0.8028046841116091
train metrics acc, f1 
0.9760665893554688, 0.9755856486886139
Epoch 12/20
----------
eval metrics, batch: 1024 acc, f1
0.8687744140625, 0.8550626938115141
eval metrics, batch: 2048 acc, f1
0.892242431640625, 0.884543700748782
eval metrics, batch: 3072 acc, f1
0.86492919921875, 0.847757292239956
eval metrics, batch: 4096 acc, f1
0.8638916015625, 0.8464398843134554
train metrics, batch: 4096  acc, f1 
0.9841880798339844, 0.9840684154895744
eval metrics, batch: 5120 acc, f1
0.893035888671875, 0.8851685614127052
eval metrics, batch: 6144 acc, f1
0.878753662109375, 0.8655180584233152
eval metrics, batch: 7168 acc, f1
0.864715576171875, 0.8464336439533031
Epoch loss - train: tensor(0.0537, device='cuda:0', grad_fn=<DivBackward0>)
Epoch loss - valid: tensor(0.3498, device='cuda:0')
epoch end metrics
eval metrics acc, f1 
0.9013671875, 0.8966487592734714
train metrics acc, f1 
0.9791259765625, 0.9793342548322042
Epoch 13/20
----------
eval metrics, batch: 1024 acc, f1
0.8662109375, 0.8491708525424895
eval metrics, batch: 2048 acc, f1
0.8818359375, 0.8730325288562435
eval metrics, batch: 3072 acc, f1
0.890655517578125, 0.8823973479502413
eval metrics, batch: 4096 acc, f1
0.85028076171875, 0.8273872352403068
train metrics, batch: 4096  acc, f1 
0.9854507446289062, 0.9853424952345816
eval metrics, batch: 5120 acc, f1
0.85357666015625, 0.8336915077989602
eval metrics, batch: 6144 acc, f1
0.9024658203125, 0.8968832677292379
eval metrics, batch: 7168 acc, f1
0.87664794921875, 0.8632796644567717
Epoch loss - train: tensor(0.0503, device='cuda:0', grad_fn=<DivBackward0>)
Epoch loss - valid: tensor(0.3179, device='cuda:0')
epoch end metrics
eval metrics acc, f1 
0.906219482421875, 0.902354548632074
train metrics acc, f1 
0.9833641052246094, 0.983528914101833
Epoch 14/20
----------
eval metrics, batch: 1024 acc, f1
0.887908935546875, 0.8779693677530815
eval metrics, batch: 2048 acc, f1
0.86798095703125, 0.8523347897323866
eval metrics, batch: 3072 acc, f1
0.8851318359375, 0.8748670212765958
eval metrics, batch: 4096 acc, f1
0.821929931640625, 0.7893273639744377
train metrics, batch: 4096  acc, f1 
0.9802970886230469, 0.980135303008742
eval metrics, batch: 5120 acc, f1
0.885467529296875, 0.8743429202799076
eval metrics, batch: 6144 acc, f1
0.8636474609375, 0.8462703000275255
eval metrics, batch: 7168 acc, f1
0.888702392578125, 0.879664763915927
Epoch loss - train: tensor(0.0468, device='cuda:0', grad_fn=<DivBackward0>)
Epoch loss - valid: tensor(0.5981, device='cuda:0')
epoch end metrics
eval metrics acc, f1 
0.852935791015625, 0.8313088528721951
train metrics acc, f1 
0.9876174926757812, 0.9875286234612488
Epoch 15/20
----------
eval metrics, batch: 1024 acc, f1
0.876068115234375, 0.862753050119977
eval metrics, batch: 2048 acc, f1
0.844451904296875, 0.820167237060297
eval metrics, batch: 3072 acc, f1
0.891571044921875, 0.8825104989914355
eval metrics, batch: 4096 acc, f1
0.85546875, 0.8360564940459706
train metrics, batch: 4096  acc, f1 
0.9858856201171875, 0.9858152765637699
eval metrics, batch: 5120 acc, f1
0.8651123046875, 0.8504128875050765
eval metrics, batch: 6144 acc, f1
0.859619140625, 0.8409845132743363
eval metrics, batch: 7168 acc, f1
0.873626708984375, 0.858818315093246
Epoch loss - train: tensor(0.0439, device='cuda:0', grad_fn=<DivBackward0>)
Epoch loss - valid: tensor(0.5109, device='cuda:0')
epoch end metrics
eval metrics acc, f1 
0.882171630859375, 0.8700393820054529
train metrics acc, f1 
0.9902687072753906, 0.9902703774757904
Epoch 16/20
----------
eval metrics, batch: 1024 acc, f1
0.878814697265625, 0.8664087468460892
eval metrics, batch: 2048 acc, f1
0.80389404296875, 0.7598295709373598
eval metrics, batch: 3072 acc, f1
0.868988037109375, 0.8526109795035534
eval metrics, batch: 4096 acc, f1
0.856781005859375, 0.8376405466182322
train metrics, batch: 4096  acc, f1 
0.9868316650390625, 0.9867890301494845
eval metrics, batch: 5120 acc, f1
0.850128173828125, 0.8278955668477308
eval metrics, batch: 6144 acc, f1
0.8660888671875, 0.8489500860585198
eval metrics, batch: 7168 acc, f1
0.81689453125, 0.7806055287406757
Epoch loss - train: tensor(0.0418, device='cuda:0', grad_fn=<DivBackward0>)
Epoch loss - valid: tensor(0.4975, device='cuda:0')
epoch end metrics
eval metrics acc, f1 
0.872283935546875, 0.861143369056704
train metrics acc, f1 
0.9846153259277344, 0.9847589894752754
Epoch 17/20
----------
eval metrics, batch: 1024 acc, f1
0.870574951171875, 0.8552905449210086
eval metrics, batch: 2048 acc, f1
0.873291015625, 0.8590057049714751
eval metrics, batch: 3072 acc, f1
0.8677978515625, 0.8519278096800657
eval metrics, batch: 4096 acc, f1
0.892120361328125, 0.8834909857947991
train metrics, batch: 4096  acc, f1 
0.9869537353515625, 0.9869880838241337
eval metrics, batch: 5120 acc, f1
0.8516845703125, 0.8291980037955999
eval metrics, batch: 6144 acc, f1
0.8941650390625, 0.8875121634771327
eval metrics, batch: 7168 acc, f1
0.86944580078125, 0.8543907420013614
Epoch loss - train: tensor(0.0394, device='cuda:0', grad_fn=<DivBackward0>)
Epoch loss - valid: tensor(0.6485, device='cuda:0')
epoch end metrics
eval metrics acc, f1 
0.85406494140625, 0.8330890052356021
train metrics acc, f1 
0.987274169921875, 0.987184609238145
Epoch 18/20
----------
eval metrics, batch: 1024 acc, f1
0.86865234375, 0.8522181019090784
eval metrics, batch: 2048 acc, f1
0.869293212890625, 0.8531559639318408
eval metrics, batch: 3072 acc, f1
0.866058349609375, 0.8492840218399094
eval metrics, batch: 4096 acc, f1
0.884002685546875, 0.8725822131339881
train metrics, batch: 4096  acc, f1 
0.9881858825683594, 0.9881671499910213
eval metrics, batch: 5120 acc, f1
0.8919677734375, 0.8824467025303845
eval metrics, batch: 6144 acc, f1
0.898773193359375, 0.8916260986048943
eval metrics, batch: 7168 acc, f1
0.84918212890625, 0.8258510113468179
Epoch loss - train: tensor(0.0368, device='cuda:0', grad_fn=<DivBackward0>)
Epoch loss - valid: tensor(0.4961, device='cuda:0')
epoch end metrics
eval metrics acc, f1 
0.87103271484375, 0.8581403155421282
train metrics acc, f1 
0.9898948669433594, 0.9899398059358563
Epoch 19/20
----------
eval metrics, batch: 1024 acc, f1
0.870574951171875, 0.8564853981252749
eval metrics, batch: 2048 acc, f1
0.880859375, 0.8701436934539649
eval metrics, batch: 3072 acc, f1
0.878448486328125, 0.8655708933814844
eval metrics, batch: 4096 acc, f1
0.846343994140625, 0.8230166262434532
train metrics, batch: 4096  acc, f1 
0.9898948669433594, 0.989846956961676
eval metrics, batch: 5120 acc, f1
0.855865478515625, 0.8348312642070292
eval metrics, batch: 6144 acc, f1
0.85614013671875, 0.8362853372230326
eval metrics, batch: 7168 acc, f1
0.896087646484375, 0.8893294763870381
Epoch loss - train: tensor(0.0351, device='cuda:0', grad_fn=<DivBackward0>)
Epoch loss - valid: tensor(0.6705, device='cuda:0')
epoch end metrics
eval metrics acc, f1 
0.86029052734375, 0.8409090909090909
train metrics acc, f1 
0.9892921447753906, 0.989213263804294
Epoch 20/20
----------
eval metrics, batch: 1024 acc, f1
0.88446044921875, 0.8736061961674567
eval metrics, batch: 2048 acc, f1
0.891571044921875, 0.8848708726224037
eval metrics, batch: 3072 acc, f1
0.893951416015625, 0.8862781032169388
eval metrics, batch: 4096 acc, f1
0.8739013671875, 0.8615930863535874
train metrics, batch: 4096  acc, f1 
0.9897041320800781, 0.9897471157827559
eval metrics, batch: 5120 acc, f1
0.865814208984375, 0.8494435884266393
eval metrics, batch: 6144 acc, f1
0.8372802734375, 0.8095714285714286
eval metrics, batch: 7168 acc, f1
0.876251220703125, 0.8623136735594716
Epoch loss - train: tensor(0.0336, device='cuda:0', grad_fn=<DivBackward0>)
Epoch loss - valid: tensor(0.5364, device='cuda:0')
epoch end metrics
eval metrics acc, f1 
0.87786865234375, 0.8672108301811666
train metrics acc, f1 
0.9886512756347656, 0.9887266622962747
Training time 483m 53s
train_acc
0.4558906555175781	0.9457359313964844	0.9576416015625	0.9544181823730469	0.9525833129882812	0.9676551818847656	0.9665641784667969	0.9701957702636719	0.9712257385253906	0.9708480834960938	0.9759597778320312	0.97479248046875	0.9705047607421875	0.9763603210449219	0.9719009399414062	0.9735794067382812	0.9815483093261719	0.9789199829101562	0.9779930114746094	0.9805374145507812	0.9751777648925781	0.9844512939453125	0.9760665893554688	0.9841880798339844	0.9791259765625	0.9854507446289062	0.9833641052246094	0.9802970886230469	0.9876174926757812	0.9858856201171875	0.9902687072753906	0.9868316650390625	0.9846153259277344	0.9869537353515625	0.987274169921875	0.9881858825683594	0.9898948669433594	0.9898948669433594	0.9892921447753906	0.9897041320800781	0.9886512756347656
train_f1
0.5383756493033642	0.9457274430281225	0.957453982558585	0.9530618417796354	0.9531042496679947	0.9674234187160701	0.9663126904879952	0.9702849797095056	0.970771382847223	0.9707588465776907	0.9759975014853974	0.9744535424060371	0.9708587107278538	0.9765798315199111	0.9712980930337675	0.9739151394632379	0.9815479573813892	0.9787854822982011	0.9781055140403278	0.9803630261415771	0.9755255407738398	0.9845053182187958	0.9755856486886139	0.9840684154895744	0.9793342548322042	0.9853424952345816	0.983528914101833	0.980135303008742	0.9875286234612488	0.9858152765637699	0.9902703774757904	0.9867890301494845	0.9847589894752754	0.9869880838241337	0.987184609238145	0.9881671499910213	0.9899398059358563	0.989846956961676	0.989213263804294	0.9897471157827559	0.9887266622962747
train_loss
tensor(0.1892, device='cuda:0', grad_fn=<DivBackward0>)	tensor(0.1369, device='cuda:0', grad_fn=<DivBackward0>)	tensor(0.1165, device='cuda:0', grad_fn=<DivBackward0>)	tensor(0.1037, device='cuda:0', grad_fn=<DivBackward0>)	tensor(0.0929, device='cuda:0', grad_fn=<DivBackward0>)	tensor(0.0841, device='cuda:0', grad_fn=<DivBackward0>)	tensor(0.0783, device='cuda:0', grad_fn=<DivBackward0>)	tensor(0.0720, device='cuda:0', grad_fn=<DivBackward0>)	tensor(0.0674, device='cuda:0', grad_fn=<DivBackward0>)	tensor(0.0624, device='cuda:0', grad_fn=<DivBackward0>)	tensor(0.0573, device='cuda:0', grad_fn=<DivBackward0>)	tensor(0.0537, device='cuda:0', grad_fn=<DivBackward0>)	tensor(0.0503, device='cuda:0', grad_fn=<DivBackward0>)	tensor(0.0468, device='cuda:0', grad_fn=<DivBackward0>)	tensor(0.0439, device='cuda:0', grad_fn=<DivBackward0>)	tensor(0.0418, device='cuda:0', grad_fn=<DivBackward0>)	tensor(0.0394, device='cuda:0', grad_fn=<DivBackward0>)	tensor(0.0368, device='cuda:0', grad_fn=<DivBackward0>)	tensor(0.0351, device='cuda:0', grad_fn=<DivBackward0>)	tensor(0.0336, device='cuda:0', grad_fn=<DivBackward0>)
valid_acc
0.541595458984375	0.8724365234375	0.87542724609375	0.888397216796875	0.89129638671875	0.8870849609375	0.888916015625	0.90704345703125	0.8978271484375	0.89215087890625	0.891357421875	0.904327392578125	0.883758544921875	0.894927978515625	0.90765380859375	0.903350830078125	0.8822021484375	0.87860107421875	0.841949462890625	0.889617919921875	0.87811279296875	0.848541259765625	0.914306640625	0.890899658203125	0.89459228515625	0.862945556640625	0.88922119140625	0.83331298828125	0.87384033203125	0.86419677734375	0.8619384765625	0.883575439453125	0.876434326171875	0.866455078125	0.900909423828125	0.880859375	0.862060546875	0.893707275390625	0.88232421875	0.8892822265625	0.888702392578125	0.87042236328125	0.88909912109375	0.87799072265625	0.8848876953125	0.895965576171875	0.87493896484375	0.888763427734375	0.91168212890625	0.8680419921875	0.8824462890625	0.864410400390625	0.90142822265625	0.864105224609375	0.906219482421875	0.89324951171875	0.8450927734375	0.8741455078125	0.89764404296875	0.841339111328125	0.903778076171875	0.88720703125	0.898529052734375	0.876495361328125	0.888031005859375	0.869476318359375	0.8988037109375	0.88623046875	0.861175537109375	0.831878662109375	0.90179443359375	0.904052734375	0.902008056640625	0.875885009765625	0.87457275390625	0.830902099609375	0.86077880859375	0.88427734375	0.8997802734375	0.8983154296875	0.905548095703125	0.872100830078125	0.8134765625	0.907470703125	0.890960693359375	0.894683837890625	0.830474853515625	0.87255859375	0.83349609375	0.8687744140625	0.892242431640625	0.86492919921875	0.8638916015625	0.893035888671875	0.878753662109375	0.864715576171875	0.9013671875	0.8662109375	0.8818359375	0.890655517578125	0.85028076171875	0.85357666015625	0.9024658203125	0.87664794921875	0.906219482421875	0.887908935546875	0.86798095703125	0.8851318359375	0.821929931640625	0.885467529296875	0.8636474609375	0.888702392578125	0.852935791015625	0.876068115234375	0.844451904296875	0.891571044921875	0.85546875	0.8651123046875	0.859619140625	0.873626708984375	0.882171630859375	0.878814697265625	0.80389404296875	0.868988037109375	0.856781005859375	0.850128173828125	0.8660888671875	0.81689453125	0.872283935546875	0.870574951171875	0.873291015625	0.8677978515625	0.892120361328125	0.8516845703125	0.8941650390625	0.86944580078125	0.85406494140625	0.86865234375	0.869293212890625	0.866058349609375	0.884002685546875	0.8919677734375	0.898773193359375	0.84918212890625	0.87103271484375	0.870574951171875	0.880859375	0.878448486328125	0.846343994140625	0.855865478515625	0.85614013671875	0.896087646484375	0.86029052734375	0.88446044921875	0.891571044921875	0.893951416015625	0.8739013671875	0.865814208984375	0.8372802734375	0.876251220703125	0.87786865234375
valid_f1
0.6343031040779062	0.8609632783395423	0.878793277510541	0.8848080133555927	0.8851115985034189	0.8773128191524637	0.8798203909138933	0.9041656179209665	0.8913128165173354	0.883727051391722	0.8936551559326085	0.9016408872713582	0.8715822123326927	0.8863583853186784	0.9069094936319448	0.9011578914515777	0.8763375408470558	0.8667515240838749	0.817299890640985	0.8807883721696714	0.8656214252069174	0.8252772399225489	0.9147178521533135	0.8860630398062275	0.8866277161425852	0.8456647994776453	0.8816741638959515	0.8045236561448715	0.862236736870168	0.8491013903017972	0.8451109285127363	0.8715877343565923	0.8619643405038694	0.8493009160410496	0.8997746704941816	0.8680010819583446	0.8460070863995639	0.8853182312074018	0.8741432208368692	0.8793321359675381	0.8799262502880848	0.8558919359218029	0.8799233412635474	0.8644745762711864	0.8731674512441157	0.8899363962160591	0.8598303461485839	0.8772851227148772	0.9086489898989899	0.851663807890223	0.871540052024278	0.8464064714626474	0.8963680698151951	0.8468022155709224	0.9013134654292045	0.8848129610115911	0.8196674719340629	0.8599470216667798	0.8893215417106652	0.8153436334576452	0.8998507130832513	0.8769230769230769	0.8914710970395273	0.8647347839165748	0.878296347895313	0.8536026014033886	0.8910142641162164	0.8752760120441619	0.8441002090544569	0.8021832022693813	0.8962671652375733	0.899533456892695	0.8971591455017135	0.861868695445437	0.8611861659011079	0.7993917671337026	0.8417510753434161	0.8754516192603298	0.8956731685621704	0.8925091941415575	0.9025473094241002	0.8569478103560092	0.7732769493285853	0.9030194472876152	0.8822851118505585	0.8864466453884373	0.7997115557959257	0.8575910516982677	0.8028046841116091	0.8550626938115141	0.884543700748782	0.847757292239956	0.8464398843134554	0.8851685614127052	0.8655180584233152	0.8464336439533031	0.8966487592734714	0.8491708525424895	0.8730325288562435	0.8823973479502413	0.8273872352403068	0.8336915077989602	0.8968832677292379	0.8632796644567717	0.902354548632074	0.8779693677530815	0.8523347897323866	0.8748670212765958	0.7893273639744377	0.8743429202799076	0.8462703000275255	0.879664763915927	0.8313088528721951	0.862753050119977	0.820167237060297	0.8825104989914355	0.8360564940459706	0.8504128875050765	0.8409845132743363	0.858818315093246	0.8700393820054529	0.8664087468460892	0.7598295709373598	0.8526109795035534	0.8376405466182322	0.8278955668477308	0.8489500860585198	0.7806055287406757	0.861143369056704	0.8552905449210086	0.8590057049714751	0.8519278096800657	0.8834909857947991	0.8291980037955999	0.8875121634771327	0.8543907420013614	0.8330890052356021	0.8522181019090784	0.8531559639318408	0.8492840218399094	0.8725822131339881	0.8824467025303845	0.8916260986048943	0.8258510113468179	0.8581403155421282	0.8564853981252749	0.8701436934539649	0.8655708933814844	0.8230166262434532	0.8348312642070292	0.8362853372230326	0.8893294763870381	0.8409090909090909	0.8736061961674567	0.8848708726224037	0.8862781032169388	0.8615930863535874	0.8494435884266393	0.8095714285714286	0.8623136735594716	0.8672108301811666
valid_loss
tensor(0.2879, device='cuda:0')	tensor(0.3228, device='cuda:0')	tensor(0.2987, device='cuda:0')	tensor(0.3227, device='cuda:0')	tensor(0.3325, device='cuda:0')	tensor(0.2524, device='cuda:0')	tensor(0.4900, device='cuda:0')	tensor(0.3316, device='cuda:0')	tensor(0.3914, device='cuda:0')	tensor(0.2858, device='cuda:0')	tensor(0.6282, device='cuda:0')	tensor(0.3498, device='cuda:0')	tensor(0.3179, device='cuda:0')	tensor(0.5981, device='cuda:0')	tensor(0.5109, device='cuda:0')	tensor(0.4975, device='cuda:0')	tensor(0.6485, device='cuda:0')	tensor(0.4961, device='cuda:0')	tensor(0.6705, device='cuda:0')	tensor(0.5364, device='cuda:0')
Best model metrics: train, valid, test: acc, f1
0.9707603454589844, 0.9711061101247357
0.91168212890625, 0.9086489898989899
0.871856689453125, 0.8618704562650087
Model saved, path ./models/densenet_smallrotation-1560355057.pth
experiment validation
train set
Evaluation results
[[125721.   5351.]
 [  2256. 128816.]]
#############################
Accuracy
0.9709815979003906
------------------------
Recall
0.9827880859375
------------------------
Specificity
0.9591751098632812
------------------------
Precision
0.960116869274859
------------------------
Fall_out
0.04082489013671875
------------------------
F1
0.9713202055504658
------------------------
#############################
valid set
Evaluation results
[[15481.   918.]
 [ 1976. 14393.]]
#############################
Accuracy
0.91168212890625
------------------------
Recall
0.8792840124625817
------------------------
Specificity
0.9440209768888347
------------------------
Precision
0.9400431062634708
------------------------
Fall_out
0.055979023111165316
------------------------
F1
0.9086489898989899
------------------------
#############################
test set
Evaluation results
[[15469.   922.]
 [ 3277. 13100.]]
#############################
Accuracy
0.871856689453125
------------------------
Recall
0.799902302008915
------------------------
Specificity
0.9437496186931853
------------------------
Precision
0.9342461845671088
------------------------
Fall_out
0.056250381306814715
------------------------
F1
0.8618704562650087
------------------------
#############################
AUC: 0.9407277241187486
Experiment end
########################################
